// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define MAKE_HOOK_MATCH(name_, mPtr, retval, __VA_ARGS__) struct Hook_##name_ { using funcType = retval (*)(__VA_ARGS__); static_assert(std::is_same_v<funcType, ::Hooking::InternalMethodCheck<decltype(mPtr)>::funcType>, "Hook method signature does not match!"); constexpr static const char* name() { return #name_; } static const MethodInfo* getInfo() { return ::il2cpp_utils::il2cpp_type_check::MetadataGetter<mPtr>::get(); } static funcType* trampoline() { return &name_; } static inline retval (*name_)(__VA_ARGS__) = nullptr; static funcType hook() { return hook_##name_; } static retval hook_##name_(__VA_ARGS__); }; retval Hook_##name_::hook_##name_(__VA_ARGS__)
#define DECLARE_INSTANCE_FIELD_DEFAULT(type_, name_, value) private: struct ___FieldRegistrator_##name_ : ::custom_types::FieldRegistrator { ___FieldRegistrator_##name_() { ___TargetType::___TypeRegistration::addField(this); } constexpr const char* name() const override { return #name_; } const Il2CppType* type() const override { ::il2cpp_functions::Init(); return ::il2cpp_functions::class_get_type(::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<type_>::get()); } constexpr uint16_t fieldAttributes() const override { return FIELD_ATTRIBUTE_PUBLIC; } constexpr size_t size() const override { return sizeof(type_); } int32_t offset() const override { return offsetof(___TargetType, name_); } }; static inline ___FieldRegistrator_##name_ ___##name_##_FieldRegistrator; public: type_ name_ = value
#define DECLARE_CLASS_CODEGEN_INTERFACES(namespaze, name, baseT, interfaceTs, __VA_ARGS__) ___DECLARE_TYPE_WRAPPER_INHERITANCE(namespaze, name, Il2CppTypeEnum::IL2CPP_TYPE_CLASS, baseT, #namespaze, ::il2cpp_utils::ExtractTypes<interfaceTs>(), 0, nullptr, __VA_ARGS__)
